#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Dec 14 21:20:26 2019

@author: swapnillagashe
"""


""" This is a simple neural network model as images in mnist dataset are 28*28 pixels hence not using CNN here, will do that with CIFAR dataset which is more complex"""


import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

# using fashion mnist dataset
fashion_mnist = keras.datasets.fashion_mnist # contains 4 arrays of train images, test images, trainlabels, test labels
(train_images, train_labels),(test_images, test_labels) = fashion_mnist.load_data()
# since class names are not mentione  int the datadet we have to deefine them ourselves manually, thgese will be used to classify the images lateron
class_names =['T-shirt/top', 'Trouser', 'Pullover','Dress','Coat','Sandal','Shirt','Sneaker','Bag','Ankle boot']

#check dimensions of dataset
train_images.shape
train_labels.shape
test_images.shape
test_labels.shape

#check image by plotting
plt.figure()
plt.imshow(train_images[0])
plt.colorbar()
plt.grid(False)
plt.show()

#since pixel range of image is from 0-255 and we want it between 0-1 for ease
train_images=train_images/255.0
test_images=test_images/255.0

#check first 25 images with their labels from training dataset
plt.figure(figsize=(12,12))
for i in range (25):
    plt.subplot(5,5,i+1) #plots 5*5 images in the same plot
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    plt.xlabel(class_names[train_labels[i]])
plt.show()

#building the layers for neural network model
model=keras.Sequential([
        keras.layers.Flatten(input_shape=(28,28)),   #converts 2D(28*28) pixels to 1D(786), this layers does not do any learning, but converts the multidimensional data into 1d which is used to train the model
        keras.layers.Dense(128,activation=tf.nn.relu),
        # This is our hidden layer, 128 neurons are generally used but can be #anything,Dense means fully connected, each neuron in 1st layer is connect to each neuron in next layer
        
        keras.layers.Dense(10,activation=tf.nn.softmax) # This is our output layer with 10 outputs(neurons), activation function can also be changed
        ])


#compiling the model using adom optimiser (different optimiser and loss(error, which is to be minimised) function can be used)
#metrics is used to monitor the training and testing steps
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

#fitting the model, epochs is the number of times model is trained (can be varied)
model.fit(train_images, train_labels, epochs=5)


"""now we will evaluate how the model performs on the test dataset by checking loss and accuracy
if the test accuracy is less than the train accuracy, it means that the model is overfitting which should be minimised
(overfitiing is when the model performs worse on test data as compared to training data) """

test_loss,test_accuracy = model.evaluate(test_images, test_labels)

#predict labels for test images
predictions=model.predict(test_images ) #will be an array of ten numbers giving probability of each label
##prediction_arg_max=np.argmax(predictions) #selects label with max probability


"""" create a function to check the ith prediction graphically, will have to learn matplot lib in detail :/ """

def plot_image(i,predictions_array, true_label, img ):
    predictions_array, true_label, img = predictions_array[i], true_label[i], img[i]
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])
    plt.imshow(img, cmap=plt.cm.binary)
    
    predicted_label = np.argmax(predictions_array)
    
    # plot in red for wrong prediction and blue for correct
    if predicted_label == true_label:
        color='blue'
    else:
        color='red'
    plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
               100*np.max(predictions_array),
               class_names[true_label]), color=color)
    
"""create a function to plot bar graph showing probailities of different labels for ith images"""
def plot_probabilities(i,predictions_array,true_label):
    predictions_array, true_label =predictions_array[i], true_label[i]
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])
    
    this_plot = plt.bar(range(10), predictions_array, color='#777777')
    plt.ylim([0,1])
    predicted_label = np.argmax(predictions_array)
    this_plot[predicted_label].set_color('red')
    this_plot[true_label].set_color('green')


""" checking the predictions by plotting """
i = 1 #check  for 15th image
plt.figure(figsize=(6,3))
plt.subplot(1,2,1)
plot_image(i, predictions, test_labels, test_images)
plt.subplot(1,2,2)
plot_probabilities(i,predictions, test_labels)
plt.show()

#checking multiple predicitons simultaneously

num_rows=5
num_cols=3
num_images=num_rows*num_cols
plt.figure(figsize=(2*2*num_cols,2*num_rows))

for i in range(num_images):
    plt.subplot(num_rows, 2*num_cols,2*i+1)
    plot_image(i, predictions, test_labels, test_images)
    plt.subplot(num_rows, 2*num_cols,2*i+2)
    plot_probabilities(i,predictions, test_labels)

plt.show()


""" now we predict on new unknown single image. even if we are using only one image, we need it to add it to the list as keras predicts on batches, therefore we add our image to a list """

img=test_images[0]
print(img.shape)

img = np.expand_dims(img,0) #adds one more dimension
print(img.shape)

predictions_single = model.predict(img) #returns a list of list, list of 10 probabilities for each image
np.argmax(predictions_single[0])

#check graphically
plot_probabilities(0,predictions_single, test_labels)





